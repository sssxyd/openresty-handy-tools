
#user  nobody;
worker_processes  auto;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  30s;
    types_hash_max_size 4096;

    #gzip  on;

    #Transparently Pass Through the Client's Real IP Address
    proxy_set_header  Host $host:$server_port;
    proxy_set_header  X-Real-IP $remote_addr;
    proxy_set_header  X-Real-PORT $remote_port;
    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;

    #Add the Custom 'scripts' Directory to OpenResty's Lua Path
    lua_package_path "/usr/local/openresty/nginx/conf/scripts/?.lua;;";
    #Cache the Lua code; please do not turn it off.
    lua_code_cache on;
    #Shared Memory Block Used for Health Checks
    lua_shared_dict healthcheck 10m;
    
    #1.Initialize RestyBase, Set Redis Configuration, and Set the Directory for Rule JSON Files
    #2.Initialize rate_limit_based_on_device_no, Set expired_seconds (in seconds)
    init_by_lua_block {
        local restybase = require("restybase")
        restybase.init_by_lua_block({
            redis = {
                host = "127.0.0.1", 
                port = 6379, 
                auth = "xxxxxxx", 
                pool_size = 32, 
                idle_millis = 10000
            }, 
            rule_path = "/usr/local/openresty/nginx/conf/rules"
        })
        
        local rate_limit_based_on_device_no = require("rate_limit_based_on_device_no")
        rate_limit_based_on_device_no.init_by_lua_block({
            expired_seconds = 600
        })
    }

    #1.Execute RestyBase initialization in each worker
    #2.Health Check, Configure one entry for each upstream. Please modify the HTTP URL for health checks of each upstream
    init_worker_by_lua_block{
        local restybase = require("restybase")
        restybase.init_worker_by_lua_block()
        
        local hc = require("resty.upstream.healthcheck")
        
        local ok, err = hc.spawn_checker{
            shm = "healthcheck",  -- lua_shared_dict
            upstream = "device_rate_limit_backend",  -- upstream name
            type = "http",
            http_req = "GET /4000/4000/1/guest.sys.warning.add HTTP/1.0\r\nHost: 127.0.0.1\r\n\r\n",  -- http request for checking
            interval = 2000,  -- run the check cycle every 2 sec
            timeout = 1000,   -- 1 sec is the timeout for network operations
            fall = 3,  -- # of successive failures before turning a peer down
            rise = 2,  -- # of successive successes before turning a peer up
            valid_statuses = {200, 302},  -- a list valid HTTP status code
            concurrency = 10,  -- concurrency level for test requests
        }

        if not ok then
            ngx.log(ngx.ERR, "failed to spawn health checker: ", err)
            return
        end
    }

    include conf.d/*.conf;

}
